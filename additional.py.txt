# orders.py 
# Import necessary Django modules and app models
from django.shortcuts import render, redirect, get_object_or_404
from users.models import UserAddress, UserSecondaryAddress
from cart.models import CartItem, ShoppingSession
from orders.models import OrderDetails, OrderItems
from payments.models import PaymentDetails
from store.models import Product
import requests
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.mail import EmailMessage
from django.template.loader import render_to_string
from django.conf import settings
from django.views.decorators.http import require_POST

FAST_API_URL = settings.FAST_API_URL
DJANGO_URL = settings.DJANGO_URL


def send_order_confirmation_email(user, order, payment_method):
    email_subject = 'üõçÔ∏è Your Order Confirmation - UrbanBazzar'

    email_context = {
        'firstname': user.first_name,
        'order_number': order['id'],
        'total_amount': order['total'],
        'shipping_address': f"{order['address']}, {order['city']}, {order['pincode']}, {order['country']}",
        'payment_method': payment_method.upper(),
        'support_email': 'support@urbanbazzar.com',
        'help_center_url': f'{DJANGO_URL}/Contact-Us/',
    }

    email_body = render_to_string('emails/order_place_email.html', email_context)

    email = EmailMessage(
        email_subject,
        email_body,
        settings.DEFAULT_FROM_EMAIL,
        [user.email],
    )
    email.content_subtype = "html"
    email.send(fail_silently=False)

@login_required
def confirm_order(request):
    if request.method == "POST":
        address_id = request.POST.get('selected_address')
        payment_method = request.POST.get('payment_method')
        # print(payment_method)
        upi_id = request.POST.get('upi_id', '')

        if not address_id:
            messages.error(request, "Please select a shipping address.")
            return redirect('cart:view_cart')

        address_obj = (
            UserAddress.objects.filter(id=address_id, user=request.user).first() or
            UserSecondaryAddress.objects.filter(id=address_id, user=request.user).first()
        )

        if not address_obj:
            messages.error(request, "Invalid address selection.")
            return redirect('cart:view_cart')

        # Existing variables 
        address = address_obj.address
        city = address_obj.city
        pincode = address_obj.pincode
        country = address_obj.country
        mobile = address_obj.mobile

        # Call the FastAPI order creation endpoint
        try:
            api_url = f"{FAST_API_URL}/orders/"  
            payload = {
                "address": address,
                "city": city,
                "pincode": pincode,
                "country": country,
                "mobile": mobile,
                "payment_method": payment_method,
                "upi_id": upi_id,
            }
            # print(payload.payment_method)

            headers = {
                "Authorization": f"Bearer {request.session.get('access_token')}"
            }

            response = requests.post(api_url, json=payload, headers=headers)
            response.raise_for_status()
            order_data = response.json()

            send_order_confirmation_email(request.user, order_data, payment_method)
            messages.success(request, "Order placed successfully!")
            return redirect('orders:order_success')

        except requests.exceptions.RequestException as e:
            # messages.error(request, f"Order placement failed: {str(e)}")
            messages.error(request, "Your Cart Is Empty")
            return redirect('cart:view_cart')

    return redirect('cart:view_cart')

# View to render the order success page
@login_required
def order_success(request):
    return render(request, 'orders/order_success.html')  # Display success template


# View to list all orders placed by the user
@login_required
def order_list(request):
    # Get user's orders, most recent first
    orders = OrderDetails.objects.filter(user=request.user).order_by('-created_at')

    # Add line_total for each order item for display
    for order in orders:
        for item in order.orderitems.all():  
            item.line_total = item.product.price * item.quantity

    # Render orders in template
    return render(request, 'orders/orders.html', {'orders': orders})


# UrbanBazzar views.py
from django.shortcuts import render, redirect, get_object_or_404
import requests
from django.contrib import messages
from store.models import Product, ProductCategory, TryOnImage
from django.http import JsonResponse
from django.core.files.base import ContentFile
from io import BytesIO
import base64
from PIL import Image

# Create your views here.
def User_home(request):
    """Home view displaying featured products, categories, and recommendations"""
    # Fetch featured products with images
    featured_products = Product.objects.prefetch_related('images').order_by('?')

    # Fetch all categories with their related products and images
    categories = ProductCategory.objects.prefetch_related('product_set__images').all()

    # Fetch latest recommended products with images
    recommended_products = Product.objects.prefetch_related('images').order_by('?')

    # Prepare context dictionary to send to template
    context = {
        'products': featured_products,
        'categories': categories,
        'recommended_products': recommended_products,
    }
    return render(request, "urbanbazzar.html", context)

def About_us(request):
    # Renders the About Us page
    return render(request, "Aboutus.html")

def Contact_us(request):
    if request.method == 'POST':
        # Extract form data from POST request
        name = request.POST.get('name')
        email = request.POST.get('email')
        message = request.POST.get('message')
        
        # You could log this or send an email here
        print(f"New Contact Message:\nName: {name}\nEmail: {email}\nMessage: {message}")
        
        # Show success message and redirect to Contact Us page
        messages.success(request, "Thanks for contacting us! We'll get back to you soon.")
        return redirect('Contact_us')
    
    # Render the Contact Us form template
    return render(request, 'ContactUs.html')


def tryon_view(request):
    # Get product_id from GET parameters
    product_id = request.GET.get('xproduct_id')
    product = get_object_or_404(Product, id=product_id)

    # Get related try-on image(s)
    tryon_image_qs = product.tryon_images.all()
    context = {'product': product}

    if tryon_image_qs.exists():
        # Use the first try-on image's tag
        tryon_image = tryon_image_qs.first()
        context['tag'] = tryon_image.tag
    else:
        # Set empty tag if no try-on image
        context['tag'] = ''

    if request.method == 'POST':
        # Get uploaded image from form
        user_img = request.FILES.get('uploaded_image')

        # If try-on image or user image is missing, return error
        if not tryon_image_qs.exists() or not user_img:
            context['error'] = 'Missing try-on image or uploaded image.'
            return render(request, 'Tryon.html', context)

        tryon_image = tryon_image_qs.first()

        api_url = "#"
        payload = {
            'product_tag': tryon_image.tag,
        }
        files = {
            'user_img': user_img,
            'cloth_img': tryon_image.image.file,
        }
        try:
            # Send POST request to try-on API
            response = requests.post(api_url, data=payload, files=files)
            if response.status_code == 200:
                # Parse API response
                message = response.json().get("message")
                result_url = response.json().get("data")
                image_url = result_url["image_preview_url"]
                
                # Get the generated image from URL
                image_response = requests.get(image_url)
                if image_response.status_code == 200:
                    if image_response.status_code == 200:
                        image_data = image_response.content
                        # Convert image to base64
                        image_base64 = base64.b64encode(image_data).decode('utf-8')
                        context['generated_base64'] = image_base64
                    else:
                        # Set error if image fetch failed
                        context['error'] = message
            else:
                # Set error from API response
                context['error'] = message
        except Exception as e:
            # Handle unexpected errors
            context['error'] = f'Unexpected error: {e}'

    # Render Tryon page with context
    return render(request, 'Tryon.html', context)

# image_validater.py

import os
import requests
from urllib.request import urlopen
from django.core.files.base import ContentFile
from .models import Product, TryOnImage

API_URL = ""  # Add the correct API URL

def process_product_images():
    # print("üîÑ Starting product image validation...")

    all_products = Product.objects.all()

    for product in all_products:
        product_urls = []  # To collect image URLs for each product

        for product_img in product.images.all():
            original_file_name = os.path.basename(product_img.image.name)

            if product.tryon_images.filter(image__endswith=original_file_name).exists():
                # print(f"üü° Product '{product.name}' already has a validated image: {original_file_name}")
                break
        else:
            for product_img in product.images.all():
                try:
                    img_path = product_img.image.path
                    original_file_name = os.path.basename(product_img.image.name)

                    with open(img_path, 'rb') as img_file:
                        response = requests.post(
                            API_URL,
                            files={"image": img_file},
                            data={"product_id": product.id}
                        )
                        if response.status_code == 200:
                            data = response.json()
                            image_url = data.get("image_url")
                            tag = data.get("tag", "")

                            if image_url:
                                resp = urlopen(image_url)
                                img_data = resp.read()
                                file_name = os.path.basename(image_url)

                                # Save the Try-On Image
                                tryon_image = TryOnImage(
                                    product=product,
                                    tag=tag
                                )
                                tryon_image.image.save(file_name, ContentFile(img_data), save=True)

                                print(f"‚úÖ Saved Try-On Image for '{product.name}' with tag '{tag}'")

                                # Add the image URL to the list for the product
                                product_urls.append(image_url)

                            else:
                                print("‚ö†Ô∏è No image_url returned from API")
                        else:
                            print(f"‚ùå API error for {original_file_name}: {response.status_code}")
                except Exception as e:
                    # print("UrbanBazzar")
                    print(f"üí• Error processing image '{product_img.image.name}': {e}")

            # After processing all images, update the product's image URLs
            if product_urls:
                product.product_url = product_urls  # Assuming product_url is a list of URLs
                product.save()
                print(f"‚úÖ Updated product '{product.name}' with {len(product_urls)} image URLs.")
    
    print("‚úÖ Image validation completed.")

    # orders views.py
from django.shortcuts import render, get_object_or_404, redirect
from .models import Product, ProductImage
from django.db.models import Q 
from django.core.paginator import Paginator
from django.conf import settings
from orders.models import OrderDetails, OrderItems
from users.models import UserAddress, UserPayment, UserSecondaryAddress
from django.contrib import messages
from django.forms import modelformset_factory
from .forms import ProductForm
from django.db.models import Sum
import requests
from django.contrib.auth.decorators import login_required

FASTAPI_URL = settings.FAST_API_URL
# View for displaying detailed product page
def product_detail(request, pk):
    product = get_object_or_404(Product, pk=pk)

    context = {
        'product': product,
    }
    return render(request, 'store/product_detail.html', context)

def product_list(request):
    query = request.GET.get('q', '')
    params = {"skip": 0, "limit": 100}

    try:
        # Fetch products from FastAPI
        response = requests.get(f"{FASTAPI_URL}/store/products/", params=params)
        response.raise_for_status()
        products = response.json()  # Assumed to return a list of product dicts
    except requests.RequestException:
        messages.error(request, "Failed to load products from FastAPI.")
        products = []

    # Apply query filtering manually on the list of dicts
    if query:
        try:
            query_price = float(query)
        except ValueError:
            query_price = None

        filtered = []
        for p in products:
            if (
                query.lower() in p["name"].lower()
                or query.lower() in p["description"].lower()
                or query.lower() in p["brand_name"].lower()
                or (query_price is not None and p["price"] == query_price)
            ):
                filtered.append(p)
        products = filtered

    # Sort manually
    products = sorted(products, key=lambda p: p["id"], reverse=True)

    # Paginate manually
    paginator = Paginator(products, 15)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    return render(request, 'store/products.html', {
        'products': page_obj,
        'page_obj': page_obj,
        'query': query,
    })


# View for vendor dashboard
@login_required
def vender_dashboard(request):
    vendor = request.user

    # Restrict access to vendors only
    if not vendor.role == 'vendor':
        return redirect('store:product_list')

    # Get vendor-specific data
    products = Product.objects.filter(vendor=vendor)
    vendor_orders = OrderDetails.objects.filter(
        orderitems__product__vendor=vendor
    ).distinct()

    total_sales = OrderItems.objects.filter(
        product__vendor=vendor,
        order__status='completed'
    ).aggregate(total=Sum('product__price'))['total'] or 0

    total_products_sold = OrderItems.objects.filter(
        product__vendor=vendor
    ).aggregate(total=Sum('quantity'))['total'] or 0

    pending_payments = vendor_orders.filter(
        status='completed',
        payment__isnull=True
    ).count()

    print(pending_payments)

    # Optional user info
    user_address = UserAddress.objects.filter(user=vendor).first()
    user_secondary_address = UserSecondaryAddress.objects.filter(user=vendor).first()
    user_payment = UserPayment.objects.filter(user=vendor).first()

    context = {
        'vendor': vendor,
        'products': products,
        'orders': vendor_orders,
        'total_sales': total_sales,
        'total_products_sold': total_products_sold,
        'pending_payments': pending_payments,
        'user_address': user_address,
        'user_secondary_address': user_secondary_address,
        'user_payment': user_payment,
    }

    return render(request, 'store/Vender_dashboard.html', context)

# View for adding a new product
@login_required
def add_product(request):
    ImageFormSet = modelformset_factory(ProductImage, fields=('image',), extra=3, can_delete=True)

    if request.method == 'POST':
        form = ProductForm(request.POST)
        formset = ImageFormSet(request.POST, request.FILES, queryset=ProductImage.objects.none())

        if form.is_valid() and formset.is_valid():
            product = form.save(commit=False)
            product.vendor = request.user
            product.save()

            # Save uploaded images
            for image_form in formset:
                if image_form.cleaned_data:
                    image = image_form.save(commit=False)
                    image.product = product
                    image.save()

            messages.success(request, "Product added successfully!")
            return redirect('store:vender_dashboard')
    else:
        form = ProductForm()
        formset = ImageFormSet(queryset=ProductImage.objects.none())

    return render(request, 'store/add_product.html', {
        'form': form,
        'formset': formset,
    })

# View for editing a product
@login_required
def edit_product(request, pk):
    product = get_object_or_404(Product, pk=pk, vendor=request.user)
    ImageFormSet = modelformset_factory(ProductImage, fields=('image',), extra=3, can_delete=True)

    if request.method == 'POST':
        form = ProductForm(request.POST, request.FILES, instance=product)
        formset = ImageFormSet(request.POST, request.FILES, queryset=ProductImage.objects.filter(product=product))

        if form.is_valid() and formset.is_valid():
            product = form.save()

            # Save images
            for image_form in formset:
                if image_form.cleaned_data:
                    if image_form.cleaned_data.get('DELETE'):
                        image_form.instance.delete()
                    else:
                        image = image_form.save(commit=False)
                        image.product = product
                        image.save()

            messages.success(request, 'Product updated successfully.')
            return redirect('store:vender_dashboard')
    else:
        form = ProductForm(instance=product)
        formset = ImageFormSet(queryset=ProductImage.objects.filter(product=product))

    return render(request, 'store/edit_product.html', {
        'form': form,
        'formset': formset,
        'product': product,
    })

# View for deleting a product
@login_required
def delete_product(request, pk):
    product = get_object_or_404(Product, pk=pk, vendor=request.user)
    product.delete()
    messages.success(request, 'Product deleted successfully.')
    return redirect('store:vender_dashboard')

# View for updating order status
@login_required
def update_order_status(request, order_id):
    order = get_object_or_404(OrderDetails, id=order_id)

    if request.method == 'POST':
        new_status = request.POST.get('status')

        if new_status in dict(OrderDetails.STATUS_CHOICES):
            # If cancelled, restore stock
            if new_status == 'cancelled' and order.status != 'cancelled':
                for item in order.orderitems.all():
                    product = item.product
                    product.stock += item.quantity
                    product.save()

            # Update status
            order.status = new_status
            order.save()

            messages.success(request, 'Order status updated.')

        return redirect('store:vender_dashboard')

    return render(request, 'store/update_order_status.html', {'order': order})

# product.html
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="UrbanBazzar E-commerce Platform" />
  <meta name="author" content="UrbanBazzar Team" />
  <title>Products | UrbanBazzar</title>

  <!-- Stylesheets -->
  <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/font-awesome.min.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/prettyPhoto.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/price-range.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/animate.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/main.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/responsive.css' %}?v=2.2" /> 
  <link rel="stylesheet" href="{% static 'css/products.css' %}?v=2.2" /> 

  <!-- Favicon -->
  <link rel="apple-touch-icon" sizes="180x180" href="{% static 'favicon_white/apple-touch-icon.png' %}">
  <link rel="icon" type="image/png" sizes="32x32" href="{% static 'favicon_white/favicon-32x32.png' %}">
  <link rel="icon" type="image/png" sizes="16x16" href="{% static 'favicon_white/favicon-16x16.png' %}">
  <link rel="manifest" href="{% static 'favicon_white/site.webmanifest' %}">
  <link rel="icon" href="{% static 'favicon_white/favicon.ico' %}">  

</head>
<body>
  <!-- Popup Container (fixed line) -->
  <div class="popup-container" id="popupContainer">
    {% for message in messages %}
        <div class="popup {{ message.tags }}">{{ message }}</div>
    {% endfor %}
  </div>

  <header id="header">
    <!--header-->
    <div class="header-middle">
      <!--header-middle-->
      <div class="container">
        <div class="row">
          <div class="col-sm-4">
            <div class="logo pull-left">
              <a href="{% url "home" %}"
                ><img
                  class="logo"
                  src="{% static 'images/UrbanBazzarWhite.png' %}"
                  alt="UrbanBazzar Logo"
              /></a>
            </div>
          </div>
          <div class="col-sm-8">
            <div class="shop-menu pull-right">
              <ul class="nav navbar-nav">
                <li>
                  {% if user.is_authenticated %}
                  <a href="{% url 'cart:view_cart' %}"><i class="fa fa-shopping-cart"></i> Cart</a>
                  {% else %}
                  <a href="{% url 'users:Login_user' %}"><i class="fa fa-shopping-cart"></i> Cart</a>
                  {% endif %}
                </li>
                <li>
                  {% if user.is_authenticated %}
                  <li class="dropdown">
                    <a href="#"><i class="fa fa-user"></i>{{user.username}}<i class="fa fa-angle-down"></i></a>
                    <ul role="menu" class="sub-menu">
                      <li><a href="#">Profile</a></li>
                      {% if user.role == "vendor" %}
                        <li><a href="{% url 'store:vender_dashboard' %}">Add-Products</a></li>
                      {% endif %}
                      <li><a href="{% url 'orders:order_list' %}">Orders</a></li>
                      <li><a href="{% url 'users:logout_user' %}">Logout</a></li>
                    </ul>
                  </li>
                  {% else %}
                    <a href="{% url 'users:Login_user' %}">
                      <i class="fa fa-lock"></i> Login
                    </a>
                  {% endif %}
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!--/header-middle-->

    <div class="header-bottom">
      <!--header-bottom-->
      <div class="container">
        <div class="row">
          <div class="col-sm-9">
            <div class="navbar-header">
              <button
                type="button"
                class="navbar-toggle"
                data-toggle="collapse"
                data-target=".navbar-collapse"
              >
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
            </div>
            <div class="mainmenu pull-left">
              <ul class="nav navbar-nav collapse navbar-collapse">
                <li><a href="{% url "home" %}" class="active">Home</a></li>
                <li class="dropdown">
                  <a href="#">Shop<i class="fa fa-angle-down"></i></a>
                  <ul role="menu" class="sub-menu">
                    <li><a href="{% url 'store:product_list' %}">Products</a></li>
                    <li>
                      {% if user.is_authenticated %}
                        <a href="#" data-toggle="modal" data-target="#checkoutModal">Checkout</a>
                      {% else %}
                        <a href="{% url "users:Login_user" %}">Checkout</a>
                      {% endif %}
                    </li>
                    <li>
                      {% if user.is_authenticated %}
                        <a href="{% url 'cart:view_cart' %}">Cart</a>
                      {% else %}
                      <a href="{% url 'users:Login_user' %}">Cart</a>
                      {% endif %}
                    </li>
                  </ul>
                </li>
                <li><a href="{% url "About_Us" %}">About US</a></li>
                <li><a href="{% url "Contact_us" %}">Contact</a></li>
              </ul>
            </div>
          </div>
          <div class="col-sm-3">
            <div class="search_box pull-right">
              <form method="GET" action="{% url 'store:product_list' %}">
                <input type="text" name="q" placeholder="Search products..." value="{{ request.GET.q|default:'' }}" />
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!--/header-bottom-->
  </header>
  <!--/header-->


  <!-- Product Section -->
  <section id="products">
    <div class="container">
      <div class="col-sm-12 padding-right py-5">
        <div class="vendor-dashboard">
          <h2 class="title text-center">Latest Products</h2>
  
          <div class="card shadow-sm mx-auto mt-4" style="max-width: 1100px;">
            <div class="card-body">
              <div class="product-grid row">
                {% for product in products %}
                  <div class="product-item col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="product-image-wrapper">
                      <div class="single-products">
                        <div class="productinfo text-center">
                          {% if product.product_images %}
                              <img src="{{ product.product_images.0.url }}" alt="{{ product.name }}" class="img-responsive product-image" />
                          {% else %}
                              <img src="{% static 'images/default.png' %}" alt="{{ product.name }}" class="img-responsive product-image" />
                          {% endif %}
                          <h2>‚Çπ{{ product.price }}</h2>
                          <p>
                            <a href="{% url 'store:product_detail' product.id %}" style="text-decoration: none; color:rgb(0, 0, 0);">
                              <h4 style="text-decoration: none; color: #696763;">{{ product.brand_name }}</h4>
                              {{ product.name }}
                            </a>
                          </p>
                          {% if product.stock == 0 %}
                            <p style="color: red;">OUT OF STOCK</p>
                          {% else %}
                            <form method="post" class="add-to-cart-form" data-url="{% url 'cart:add_to_cart' product.id %}">
                              {% csrf_token %}
                              {% if user.is_authenticated %}
                                <button type="submit" class="btn btn-default add-to-cart">
                                  <i class="fa fa-shopping-cart"></i> Add to cart
                                </button>
                              {% else %}
                                <button type="button" onclick="window.location.href='{% url 'users:Login_user' %}'" class="btn btn-default add-to-cart">
                                  <i class="fa fa-shopping-cart"></i> Add to cart
                                </button>
                              {% endif %}
                            </form>
                          {% endif %}
                        </div>
                      </div>
                    </div>
                  </div>
                {% empty %}
                  <p class="text-center">No products available.</p>
                {% endfor %}
              </div>
  
              <!-- Pagination -->
              <div class="text-center">
                <ul class="pagination" style="border-radius: 7px; overflow: hidden;">
                  {% if page_obj.has_previous %}
                    <li><a href="?page={{ page_obj.previous_page_number }}">&laquo;</a></li>
                  {% endif %}
                  {% for num in page_obj.paginator.page_range %}
                    {% if num == page_obj.number %}
                      <li class="active"><a href="#">{{ num }}</a></li>
                    {% elif num >= page_obj.number|add:"-2" and num <= page_obj.number|add:"2" %}
                      <li><a href="?page={{ num }}">{{ num }}</a></li>
                    {% endif %}
                  {% endfor %}
                  {% if page_obj.has_next %}
                    <li><a href="?page={{ page_obj.next_page_number }}">&raquo;</a></li>
                  {% endif %}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>  

  <footer id="footer">
    <!--Footer-->
    <div class="footer-top">
      <div class="container">
        <div class="row">
          <div class="col-sm-2">
            <div class="companyinfo">
              <h2><span>UrBan</span>Bzzar</h2>
              <p>
                Browse through our diverse range of meticulously crafted
                garments, designed to bring out your individuality and cater
                to your sense of style
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="footer-widget">
      <div class="container">
        <div class="row">
          <div class="col-sm-2">
            <div class="single-widget">
              <h2>Service</h2>
              <ul class="nav nav-pills nav-stacked">
                <li><a href="#">Online Help</a></li>
                <li><a href="#">Contact Us</a></li>
                <li><a href="#">Order Status</a></li>
                <li><a href="#">Change Location</a></li>
                <li><a href="#">FAQ's</a></li>
              </ul>
            </div>
          </div>
          <div class="col-sm-2">
            <div class="single-widget">
              <h2>Quock Shop</h2>
              <ul class="nav nav-pills nav-stacked">
                <li><a href="#">T-Shirt</a></li>
                <li><a href="#">Mens</a></li>
                <li><a href="#">Womens</a></li>
                <li><a href="#">Gift Cards</a></li>
                <li><a href="#">Shoes</a></li>
              </ul>
            </div>
          </div>
          <div class="col-sm-2">
            <div class="single-widget">
              <h2>Policies</h2>
              <ul class="nav nav-pills nav-stacked">
                <li><a href="#">Terms of Use</a></li>
                <li><a href="#">Privecy Policy</a></li>
                <li><a href="#">Refund Policy</a></li>
                <li><a href="#">Billing System</a></li>
                <li><a href="#">Ticket System</a></li>
              </ul>
            </div>
          </div>
          <div class="col-sm-2">
            <div class="single-widget">
              <h2>About URBANBAZZAR</h2>
              <ul class="nav nav-pills nav-stacked">
                <li><a href="#">Company Information</a></li>
                <li><a href="#">Careers</a></li>
                <li><a href="#">Store Location</a></li>
                <li><a href="#">Affillate Program</a></li>
                <li><a href="#">Copyright</a></li>
              </ul>
            </div>
          </div>
          <div class="col-sm-3 col-sm-offset-1">
            <div class="single-widget">
              <h2>About URBANBAZZAR</h2>
              <form action="#" class="searchform">
                <input type="text" placeholder="Your email address" />
                <button type="submit" class="btn btn-default">
                  <i class="fa fa-arrow-circle-o-right"></i>
                </button>
                <p>
                  Get the most recent updates from <br />our site and be
                  updated your self...
                </p>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="footer-bottom">
      <div class="container">
        <div class="row">
          <p class="pull-left">
            Copyright ¬© 2025 UrbanBazzar Inc. All rights reserved.
          </p>
          <p class="pull-right">
            Designed by
            <span
              ><a target="_blank" href="{% url "home" %}"
                >Dev</a
              ></span
            >
          </p>
        </div>
      </div>
    </div>
  </footer>
  <!--/Footer-->

  <!-- Scripts -->
  <script src="{% static 'js/jquery.js' %}?v=2.2"></script>
  <script src="{% static 'js/bootstrap.min.js' %}?v=2.2" defer></script>
  <script src="{% static 'js/jquery.scrollUp.min.js' %}?v=2.2" defer></script>
  <script src="{% static 'js/price-range.js' %}?v=2.2" defer></script>
  <script src="{% static 'js/jquery.prettyPhoto.js' %}?v=2.2" defer></script>
  <script src="{% static 'js/main.js' %}?v=2.2" defer></script>


</body>
</html>

{% comment %} {% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="description" content="UrbanBazzar E-commerce Platform" />
  <meta name="author" content="UrbanBazzar Team" />
  <title>Products | UrbanBazzar</title>

  <!-- Stylesheets -->
  <link rel="stylesheet" href="{% static 'css/bootstrap.min.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/font-awesome.min.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/prettyPhoto.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/price-range.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/animate.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/main.css' %}?v=2.2" />
  <link rel="stylesheet" href="{% static 'css/responsive.css' %}?v=2.2" /> 
  <link rel="stylesheet" href="{% static 'css/products.css' %}?v=2.2" /> 

  <!-- Favicon -->
  <link rel="apple-touch-icon" sizes="180x180" href="{% static 'favicon_white/apple-touch-icon.png' %}">
  <link rel="icon" type="image/png" sizes="32x32" href="{% static 'favicon_white/favicon-32x32.png' %}">
  <link rel="icon" type="image/png" sizes="16x16" href="{% static 'favicon_white/favicon-16x16.png' %}">
  <link rel="manifest" href="{% static 'favicon_white/site.webmanifest' %}">
  <link rel="icon" href="{% static 'favicon_white/favicon.ico' %}">  

</head>
<body>
  <!-- Popup Container (fixed line) -->
  <div class="popup-container" id="popupContainer">
    {% for message in messages %}
        <div class="popup {{ message.tags }}">{{ message }}</div>
    {% endfor %}
  </div>

  <header id="header">
    <!--header-->
    <div class="header-middle">
      <!--header-middle-->
      <div class="container">
        <div class="row">
          <div class="col-sm-4">
            <div class="logo pull-left">
              <a href="{% url "home" %}"><img class="logo" src="{% static 'images/UrbanBazzarWhite.png' %}" alt="UrbanBazzar Logo" /></a>
            </div>
          </div>
          <div class="col-sm-8">
            <div class="shop-menu pull-right">
              <ul class="nav navbar-nav">
                <li>
                  {% if user.is_authenticated %}
                  <a href="#" data-toggle="modal" data-target="#checkoutModal">
                    <i class="fa fa-crosshairs"></i> Checkout
                  </a>
                  {% else %}
                  <a href="{% url "users:Login_user" %}">
                    <i class="fa fa-crosshairs"></i> Checkout
                  </a>
                  {% endif %}                 
                </li>
                <li>
                  {% if user.is_authenticated %}
                  <a href="{% url 'cart:view_cart' %}"><i class="fa fa-shopping-cart"></i> Cart</a>
                  {% else %}
                  <a href="{% url 'users:Login_user' %}"><i class="fa fa-shopping-cart"></i> Cart</a>
                  {% endif %}
                </li>
                <li>
                  {% if user.is_authenticated %}
                  <li class="dropdown">
                    <a href="#"><i class="fa fa-user"></i>{{user.username}}<i class="fa fa-angle-down"></i></a>
                    <ul role="menu" class="sub-menu">
                      <li><a href="#">Profile</a></li>
                      {% if user.role == "vendor" %}
                        <li><a href="{% url 'store:vender_dashboard' %}">Add-Products</a></li>
                      {% endif %}
                      <li><a href="{% url 'orders:order_list' %}">Orders</a></li>
                      <li><a href="{% url 'users:logout_user' %}">Logout</a></li>
                    </ul>
                  </li>
                  {% else %}
                    <a href="{% url 'users:Login_user' %}">
                      <i class="fa fa-lock"></i> Login
                    </a>
                  {% endif %}
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!--/header-middle-->

    <div class="header-bottom">
      <!--header-bottom-->
      <div class="container">
        <div class="row">
          <div class="col-sm-9">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
            </div>
            <div class="mainmenu pull-left">
              <ul class="nav navbar-nav collapse navbar-collapse">
                <li><a href="{% url "home" %}" class="active">Home</a></li>
                <li class="dropdown">
                  <a href="#">Shop<i class="fa fa-angle-down"></i></a>
                  <ul role="menu" class="sub-menu">
                    <li><a href="{% url 'store:product_list' %}">Products</a></li>
                    <li>
                      {% if user.is_authenticated %}
                        <a href="#" data-toggle="modal" data-target="#checkoutModal">Checkout</a>
                      {% else %}
                        <a href="{% url "users:Login_user" %}">Checkout</a>
                      {% endif %}
                    </li>
                    <li>
                      {% if user.is_authenticated %}
                        <a href="{% url 'cart:view_cart' %}">Cart</a>
                      {% else %}
                      <a href="{% url 'users:Login_user' %}">Cart</a>
                      {% endif %}
                    </li>
                  </ul>
                </li>
                <li><a href="{% url "About_Us" %}">About US</a></li>
                <li><a href="{% url "Contact_us" %}">Contact</a></li>
              </ul>
            </div>
          </div>
          <div class="col-sm-3">
            <div class="search_box pull-right">
              <form method="GET" action="{% url 'store:product_list' %}">
                <input type="text" name="q" placeholder="Search products..." value="{{ request.GET.q|default:'' }}" />
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!--/header-bottom-->
  </header>
  <!--/header-->


  <!-- Product Section -->
  <section id="products">
    <div class="container">
      <div class="col-sm-12 padding-right py-5">
        <div class="vendor-dashboard">
          <h2 class="title text-center">Latest Products</h2>
  
          <div class="card shadow-sm mx-auto mt-4" style="max-width: 1100px;">
            <div class="card-body">
              <div class="product-grid row">
                {% for product in products %}
                  <div class="product-item col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="product-image-wrapper">
                      <div class="single-products">
                        <div class="productinfo text-center">
                          {% if product.product_images %}
                            <img src="{{ product.product_images.0.url }}" alt="{{ product.name }}" class="img-responsive product-image" />
                          {% else %}
                            <img src="{% static 'images/default.png' %}" alt="{{ product.name }}" class="img-responsive product-image" />
                          {% endif %}
                          <h2>‚Çπ{{ product.price }}</h2>
                          <p>
                            <a href="{% url 'store:product_detail' product.id %}" style="text-decoration: none; color:rgb(0, 0, 0);">
                              <h4 style="text-decoration: none; color: #696763;">{{ product.brand_name }}</h4>
                              {{ product.name }}
                            </a>
                          </p>
                          {% if product.stock == 0 %}
                            <p style="color: red;">OUT OF STOCK</p>
                          {% else %}
                            <form method="post" class="add-to-cart-form" data-url="{% url 'cart:add_to_cart' product.id %}">
                              {% csrf_token %}
                              {% if user.is_authenticated %}
                                <button type="submit" class="btn btn-default add-to-cart">
                                  <i class="fa fa-shopping-cart"></i> Add to cart
                                </button>
                              {% else %}
                                <button type="button" onclick="window.location.href='{% url 'users:Login_user' %}'" class="btn btn-default add-to-cart">
                                  <i class="fa fa-shopping-cart"></i> Add to cart
                                </button>
                              {% endif %}
                            </form>
                          {% endif %}
                        </div>
                      </div>
                    </div>
                  </div>
                {% endfor %}
              </div>
            </div>
          </div>
  
          <div class="pagination-container d-flex justify-content-center">
            <div class="pagination">
              <span class="page-item previous">{% if products.has_previous %}<a href="?page={{ products.previous_page_number }}">Prev</a>{% endif %}</span>
              <span class="page-item next">{% if products.has_next %}<a href="?page={{ products.next_page_number }}">Next</a>{% endif %}</span>
            </div>
          </div>
  
        </div>
      </div>
    </div>
  </section>
  <!--/product-section-->
</body>
</html> {% endcomment %}



# cart views.py
import requests
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.views.decorators.http import require_POST
from store.models import Product
from users.models import UserAddress, UserSecondaryAddress
from cart.models import ShoppingSession, CartItem
from django.http import HttpResponse
from django.conf import settings
from django.contrib import messages

FAST_API_URL = settings.FAST_API_URL
# print(FAST_API_URL)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# View to add a product to the user's shopping cart
@login_required
def add_to_cart(request, product_id):
    # still check product exists in Django for 404
    get_object_or_404(Product, pk=product_id)

    # Get token from session
    access_token = request.session.get('access_token')
    print(access_token)
    if not access_token:
        return HttpResponse("Unauthorized: No token found", status=401)

    # call FastAPI with Bearer token
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    # resp = requests.post(f"{FAST_API_URL}/cart/add/{product_id}")
    resp = requests.post(f"{FAST_API_URL}/cart/add/{product_id}", headers=headers)

    if resp.status_code != 200:
        return HttpResponse("Error adding to cart", status=resp.status_code)
    else:
        data = resp.json()
        product_name = data.get("product_name")

    # if AJAX, return just a message
    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        return HttpResponse(resp.json().get("detail", f'"{product_name}" Added To Your Cart'))

    # otherwise redirect to our cart page
    return redirect('cart:view_cart')


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# View to display the current user's cart
@login_required
def view_cart(request):

    # Get token from session
    access_token = request.session.get("access_token")
    if not access_token:
        return HttpResponse("Unauthorized: No token found", status=401)
    
    # Include token in request
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    # fetch cart from FastAPI
    resp = requests.get(f"{FAST_API_URL}/cart/view", headers=headers)
    if resp.status_code != 200:
        # treat no session as empty cart
        cart_items = []
        cart_total = 0
    else:
        data = resp.json()
        cart_items = data.get("cart_items", [])
        cart_total = data.get("total", 0)
        
        for item in cart_items:
            product_id = item.get("product_id")
            if product_id:
                product_image_url = item.get("image", "")
                item["image_url"] = product_image_url 
                print(product_image_url) # For Debugging

    # Django addresses logic unchanged
    user_addresses = UserAddress.objects.filter(user=request.user)
    user_secondary_addresses = UserSecondaryAddress.objects.filter(user=request.user)
    address_count = user_addresses.count()
    secondary_address_count = user_secondary_addresses.count()
    show_add_address_button = address_count > 0 and secondary_address_count == 0

    data = {
        'cart_items': cart_items,
        'cart_total': cart_total,
        'user_addresses': user_addresses,
        'user_secondary_addresses': user_secondary_addresses,
        'address_count': address_count,
        'secondary_address_count': secondary_address_count,
        'show_add_address_button': show_add_address_button,
    }

    return render(request, 'cart/view_cart.html', data)


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# View to update the quantity of a cart item
@require_POST
@login_required
def update_cart_item(request, item_id):    
    qty = request.POST.get('quantity')
    
    try:
        qty = int(qty)
    except (TypeError, ValueError):
        messages.error(request, "Invalid quantity.")
        return redirect('cart:view_cart')
    
    # Get token from session
    access_token = request.session.get("access_token")
    if not access_token:
        messages.error(request, "Unauthorized: No token found.")
        return redirect('cart:view_cart')

    headers = {
        "Authorization": f"Bearer {access_token}",
        "Accept": "application/json",
    }

    # Call FastAPI to update the item with the token in the header
    resp = requests.post(
        f"{FAST_API_URL}/cart/update/{item_id}",
        json={"quantity": qty},
        headers=headers,
    )

    # Debugging the response
    print(f"FastAPI response status code: {resp.status_code}")
    print(f"FastAPI response body: {resp.text}")
    
    if resp.status_code != 200:
        messages.error(request, "Could not update cart item.")
    return redirect('cart:view_cart')


# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
# View to remove a cart item
@require_POST
@login_required
def remove_cart_item(request, item_id):

    # Get token from session
    access_token = request.session.get("access_token")
    if not access_token:
        messages.error(request, "Unauthorized: No token found.")
        return redirect('cart:view_cart')
    
    headers = {
        "Authorization": f"Bearer {access_token}",
    }

    # call FastAPI remove with the token in the header
    requests.post(f"{FAST_API_URL}/cart/remove/{item_id}", headers=headers)

    return redirect('cart:view_cart')

# edit_product.html

{% extends "base.html" %}
{% load static %}
{% block title %}Edit Product | UrbanBazzar{% endblock %}
{% block extra_head %}
<link rel="stylesheet" href="{% static 'css/add_product.css' %}?v=2.2" />
{% endblock %}

{% block content %}

<div class="dashboard-container">
  <div class="main-content">
    <div class="card">
      <h2>Edit Product</h2>
      <form method="POST" enctype="multipart/form-data">
        {% csrf_token %}

        <!-- Product Info -->
        {% for field in form %}
          <div class="form-group">
            {{ field.label_tag }}
            {{ field }}
            {% if field.help_text %}
              <small class="form-text text-muted">{{ field.help_text }}</small>
            {% endif %}
            {% for error in field.errors %}
              <div class="text-danger">{{ error }}</div>
            {% endfor %}
          </div>
        {% endfor %}

        <!-- Product Images -->
        <div class="image-upload-section">
          <h5>Edit Product Images</h5>
          {{ formset.management_form }}
          <div id="image-formset-container">
            {% for image_form in formset %}
              <div class="form-group image-form">
                {{ image_form.image.label_tag }}
                {{ image_form.image }}
                {% if image_form.instance.pk %}
                  <p class="text-muted">Currently:
                    <a href="{{ image_form.instance.image.url }}" target="_blank">
                      {{ image_form.instance.image.name }}
                    </a>
                  </p>
                {% endif %}
                {% if image_form.DELETE %}
                  <label>
                    {{ image_form.DELETE }} Remove
                  </label>
                {% endif %}
              </div>
            {% endfor %}
          </div>
          <button type="button" class="add-more" id="add-image-btn">+ Add another Product image</button>
        </div>

        <!-- Submit Buttons -->
        <div class="form-actions custom-button-row">
          <button type="submit" class="btn update-btn">Update Product</button>
          <a href="{% url 'store:vender_dashboard' %}" class="cancel-link">Cancel</a>
        </div>
      </form>
    </div>
  </div>
</div>

{% block extra_scripts %}
<script src="{% static 'js/add_product.js' %}?v=2.2"></script>
{% endblock %}

{% endblock %}

# users views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate, logout
from django.contrib import messages
from django.conf import settings
from django.contrib.auth.decorators import login_required
from .models import CustomUser, UserAddress
from .forms import UserAddressForm, UserSecondaryAddressForm
from django.core.mail import send_mail
from django.contrib.auth import get_user_model
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string
import pyotp
import hashlib
import random
import requests
import io as io_module
import qrcode
from io import BytesIO
import io as io_module
from django.utils.html import strip_tags

# Fast_API_URL = settings.Fast_API_URL
FAST_API_URL = settings.FAST_API_URL
DJANGO_URL = settings.DJANGO_URL

# Get the user model
User = get_user_model()

def send_signup_email(request, email, firstname):
    """Sends a signup confirmation email to the user."""
    subject = "üéâ Welcome to UrbanBazzar! Your Signup is Successful"
    from_email = "UrbanBazzar Support <support@urbanbazzar.com>"
    to_email = [email]

    # Context for rendering the email template
    context = {
        'firstname': firstname,
        'support_email': 'support@urbanbazzar.com',
        'help_center_url': F'{DJANGO_URL}/contact',  
    }

    # Render email content
    message = render_to_string('emails/signup_email.html', context)

    # Send email
    email_message = EmailMultiAlternatives(subject, message, from_email, to_email)
    email_message.content_subtype = "html"
    email_message.send()

def sending_login_otp_email(user_email, otp_code):
    """Sends the OTP email with the generated OTP code."""

    # Render email template with context including otp_code
    html_content = render_to_string("emails/otp_email.html", {
        "user_email": user_email,
        "otp_code": otp_code,  # <-- Include the OTP here
    })

    # Send email
    subject = "UrbanBazzar Login OTP"
    email = EmailMultiAlternatives(
        subject,
        strip_tags(html_content),
        'UrbanBazzar Security <support@urbanbazzar.com>',
        [user_email]
    )
    email.attach_alternative(html_content, "text/html")
    email.send()


def sending_resended_otp_email(user_email, otp_code):
    """Sends a resent OTP email."""
    html_content = render_to_string("emails/resend_otp_email.html", {
        "otp_code": otp_code,         
        "user_email": user_email      
    })

    subject = "UrbanBazzar Resent OTP"
    email = EmailMultiAlternatives(
        subject,
        strip_tags(html_content),
        'UrbanBazzar Security <support@urbanbazzar.com>',
        [user_email]
    )
    email.attach_alternative(html_content, "text/html")
    email.send()



def send_Login_email(request, email, firstname):
    """Sends a Login confirmation email to the user."""
    subject = "üéâ Welcome to UrbanBazzar! Your Login In UrbanBazzar is Successful"
    from_email = "UrbanBazzar Support <support@urbanbazzar.com>"
    to_email = [email]

    # Context for rendering the email template
    context = {
        'firstname': firstname,
        'support_email': 'support@urbanbazzar.com', #update when live with own domain
        'help_center_url': 'http://localhost:2814/contact',  # Update when live
    }

    # Render email content
    message = render_to_string('emails/Login_email.html', context)

    # Send email
    email_message = EmailMultiAlternatives(subject, message, from_email, to_email)
    email_message.content_subtype = "html"
    email_message.send()

def Deactivate_account_sending_email(email):
    """Sends an email warning about account deactivation due to multiple failed OTP attempts."""
    context = {'support_email': 'support@urbanbazzar.com'}
    html_content = render_to_string("emails/account_deactivation_warning.html", context)

    email_message = EmailMultiAlternatives(
        "UrbanBazzar Account Warning",
        strip_tags(html_content),
        "UrbanBazzar Security <support@urbanbazzar.com>",
        [email]
    )
    email_message.attach_alternative(html_content, "text/html")
    email_message.send()

def send_password_reset_email(user, reset_link):
    """Sends a password reset email using an HTML template."""
    subject = "üîê UrbanBazzar: Reset Your Password"
    from_email = "UrbanBazzar Support <support@urbanbazzar.com>"
    to_email = [user.email]

    # Render the email template from 'emails/password_reset_email.html'
    message = render_to_string("emails/password_reset_email.html", {"user": user, "reset_link": reset_link})

    mail = EmailMultiAlternatives(subject, message, from_email, to_email)
    mail.content_subtype = "html"  # Set email content as HTML
    mail.send()

def send_successful_reset_password_mail(user):
    """Sends an email notifying the user that their password has been successfully changed."""
    subject = " UrbanBazzar: Password Successfully Changed"
    from_email = "UrbanBazzar Support <support@urbanbazzar.com>"
    to_email = [user.email]
    login_url = f"{settings.DJANGO_URL}/login/user/" 
    
    # Render the email content from a template
    html_message = render_to_string("emails/successful_password_reset.html", {"user": user, "login_url": login_url })
    plain_message = strip_tags(html_message)
    
    mail = EmailMultiAlternatives(subject, plain_message, from_email, to_email)
    mail.attach_alternative(html_message, "text/html")
    mail.send()

def signup_user(request):
    """Handles user signup, validates input, and sends a confirmation email."""
    FAST_API_SIGNUP = f"{FAST_API_URL}/users/signup/"
    if request.method == "POST":
        fullname = request.POST.get("fullname", "").strip()
        first_name, last_name = (fullname.split(" ", 1) + [""])[:2]
        username = request.POST.get("username", "").strip()
        email = request.POST.get("email", "").strip()
        role = request.POST.get("role", "").strip()
        password = request.POST.get("password", "").strip()
        confirm_password = request.POST.get("confirmpassword", "").strip()

        # Server-side validation
        if not fullname:
            messages.error(request, "Full Name is required.")
        elif not username:
            messages.error(request, "Username is required.")
        elif not email:
            messages.error(request, "Email is required.")
        elif not password:
            messages.error(request, "Password is required.")
        elif password != confirm_password:
            messages.error(request, "Passwords do not match.")
        elif CustomUser.objects.filter(username=username).exists():
            messages.error(request, "Username already exists.")
        elif CustomUser.objects.filter(email=email).exists():
            messages.error(request, "Email is already in use.")
        else:
            data = {
                "username": username,
                "email": email,
                "role": role,
                "password": password,
            }

            try:
                response = requests.post(FAST_API_SIGNUP, json=data)
                if response.status_code == 200:
                    request.session['first_name'] = first_name
                    send_signup_email(request, email, first_name)
                    messages.success(
                        request, "Signup successful! A verification link has been sent to your email."
                    )
                    return redirect("users:Login_user")
                else:
                    error_detail = response.json().get("detail", "Signup failed. Please try again.")
                    messages.error(request, error_detail)
            except Exception as e:
                messages.error(request, f"Error connecting to signup service: {str(e)}")

        return redirect('users:Signup_user')

    return render(request, "users/Signup_user.html")   

def login_user(request):
    """Handles user login with email and password authentication via FastAPI."""
    FASTAPI_LOGIN_URL = f"{FAST_API_URL}/users/login/"
    FASTAPI_Authorized_User_URL = f"{FAST_API_URL}/users/token/"

    if request.method == "POST":
        email = request.POST.get("email", "").strip()
        password = request.POST.get("password", "").strip()

        # Validate input
        if not email:
            messages.error(request, "Email ID is required")
            return redirect('users:Login_user')
        if not password:
            messages.error(request, "Password is required")
            return redirect('users:Login_user')

        # Prepare data for FastAPI
        login_data = {
            "email": email,
            "password": password
        }

        auth_data = {
            "username": email,  # OAuth2 expects 'username' not 'email'
            "password": password
        }
        
        # Authorized API Based on user 
        try:
            headers = {"Content-Type": "application/x-www-form-urlencoded"}
            response = requests.post(FASTAPI_Authorized_User_URL, data=auth_data, headers=headers)
            print("FastAPI raw response:", response.text)  # DEBUG

            if response.status_code == 200:
                print("Authorized Successfully")
                token_data = response.json()
                access_token = token_data.get("access_token")
                request.session["access_token"] = access_token  # Store in session
                print("üòÄü•∏ü•≥‚ò∫Ô∏èüòîüò≤",access_token)  # DEBUG
            else:
                messages.error(request, "Authorization failed")
                return redirect('users:Login_user')
        except Exception as e:
            print("üî¥ Exception while calling token endpoint:", str(e))
            messages.error(request, f"Authorization error: {str(e)}")
            return redirect('users:Login_user')

        try:
            response = requests.post(FASTAPI_LOGIN_URL, json=login_data)
            # print("FastAPI raw response:", response.text)  # üîç DEBUG

            if response.status_code == 200:
                user_data = response.json()

                # Set session data
                request.session['otp_code'] = user_data.get('otp')
                request.session['email'] = user_data.get('email')
                request.session['user_name'] = user_data.get('username')

                # Optionally authenticate in Django (optional if you're not using Django auth)
                user = authenticate(request, username=email, password=password)
                if user is not None:
                    login(request, user)

                # Send OTP to user's email
                sending_login_otp_email(user_data['email'], user_data['otp'])

                messages.success(request, "Enter the OTP sent to your email to log in to UrbanBazzar")
                return redirect("users:Login_otp")

            else:
                # Handle error response from FastAPI
                try:
                    error_data = response.json()
                    messages.error(request, error_data.get('detail', 'Login failed'))
                except:
                    messages.error(request, "Login failed: Unexpected response format")
                return redirect('users:Login_user')

        except Exception as e:
            print("üî¥ Exception while calling FastAPI:", str(e))
            messages.error(request, f"Error connecting to FastAPI: {str(e)}")
            return redirect('users:Login_user')

    return render(request, "users/Login_user.html")

def Verify_Login_otp(request):
    if request.method == "POST":
        entered_otp = "".join(
            filter(str.isdigit, ''.join(request.POST.get(f'otp{i}', "") for i in range(1, 7)))
        )
        session_otp = request.session.get('otp_code')
        email = request.session.get('email')

        if not session_otp or not email:
            messages.error(request, "Session expired. Please log in again.")
            return redirect('users:Login_user')

        attempt_count = request.session.get('otp_attempts', 0)

        try:
            user = User.objects.get(email=email)
        except User.DoesNotExist:
            messages.error(request, "User not found.")
            return redirect('users:Login_user')

        if entered_otp == session_otp:
            FASTAPI_VERIFY_OTP_URL = f"{FAST_API_URL}/users/verify-otp"
            otp_data = {"email": email, "otp": entered_otp}

            try:
                response = requests.post(FASTAPI_VERIFY_OTP_URL, json=otp_data)

                if response.status_code == 200:
                    data = response.json()

                    #  Extract JWT token from FastAPI
                    token = data.get("access_token")
                    token_type = data.get("token_type")

                    #  Optionally store the token
                    request.session['jwt_token'] = token
                    request.session['jwt_token_type'] = token_type

                    # print(token, token_type)

                    login(request, user)
                    request.session['otp_attempts'] = 0
                    messages.success(request, "OTP Verified! You are logged in.")

                    send_Login_email(request, email, user.first_name)
                    return redirect('home')
                else:
                    messages.error(request, "Invalid OTP! Please try again.")
                    return redirect('users:Login_otp')

            except requests.exceptions.RequestException as e:
                messages.error(request, f"Error connecting to FastAPI: {e}")
                return redirect('users:Login_otp')

        else:
            attempt_count += 1
            request.session['otp_attempts'] = attempt_count

            if attempt_count >= 3:
                user.is_active = False
                user.save()
                Deactivate_account_sending_email(email)
                messages.error(request, "Too many failed OTP attempts! Contact the admin.")
                return redirect('users:Login_user')

            messages.error(request, "Invalid OTP! Please try again.")
            return redirect('users:Login_otp')

    return render(request, 'users/Login_otp.html')

def Resend_user_Login_otp(request):
    email = request.session.get('email')
    
    if not email:
        messages.error(request, "Session expired. Please log in again.")
        return redirect('users:Login_user')

    user = User.objects.filter(email=email).first()
    if not user:
        messages.error(request, "User not found. Please log in again.")
        return redirect('users:Login_user')

    try:
        # Call FastAPI endpoint to generate a new OTP
        FASTAPI_RESEND_OTP_URL = f"{FAST_API_URL}/users/resend-otp/"  
        response = requests.post(FASTAPI_RESEND_OTP_URL, data={"email": email})
        
        if response.status_code == 200:
            data = response.json()
            otp_code = data.get("otp")

            request.session['otp_code'] = otp_code
            sending_resended_otp_email(email, otp_code)  

            messages.success(request, "A new OTP has been sent to your email.")
            return redirect('users:Login_otp')
        else:
            messages.error(request, "Failed to resend OTP. Please try again.")
            return redirect('users:Login_otp')

    except Exception as e:
        messages.error(request, f"Error contacting OTP service: {str(e)}")
        return redirect('users:Login_user')


def password_reset_request(request):
    """Handles password reset requests and sends a reset link to the user's email."""
    if request.method == "POST":
        email = request.POST.get("email")

        # Check if the email exists in the database
        if User.objects.filter(email=email).exists():
            user = User.objects.get(email=email)
            print("User Exists with Email!!")

            # Prepare data to send to FastAPI
            Fast_API_PASSWORD_RESET_REQUEST = f"{FAST_API_URL}/users/forgot-password" 
            data = {"email": email}

            try:
                # Make a request to FastAPI to generate the reset link
                response = requests.post(Fast_API_PASSWORD_RESET_REQUEST, data=data)

                # Check if FastAPI successfully handled the request
                if response.status_code == 200:
                    # Extract the reset link from the FastAPI response
                    reset_link = response.json().get("reset_link")
                    
                    # Send the password reset email with the generated reset link
                    send_password_reset_email(user, reset_link)

                    # Success message
                    messages.success(request, "Password reset link sent to your email.")
                else:
                    messages.error(request, "Failed to send reset link via FastAPI.")
            except requests.exceptions.RequestException as e:
                # If FastAPI is unreachable or any error occurs
                messages.error(request, "Error while contacting FastAPI: " + str(e))

        else:
            messages.error(request, "User does not exist!!")

    return render(request, 'users/Forgetpassword.html')

def Reset_password(request, hashed_user_id):
    """Handles password reset using hashed user ID."""

    FASTAPI_RESET_PASSWORD_URL = f"{FAST_API_URL}/users/reset-password-by-link"  

    # Find the user by comparing hashed ID
    user = None
    for u in User.objects.all():
        hashed_id = hashlib.sha256(str(u.id).encode()).hexdigest()
        if hashed_id == hashed_user_id:
            user = u
            break

    if not user:
        messages.error(request, "Invalid or expired password reset link.")
        return render(request, "users/InvalidResetLink.html")

    if request.method == "POST":
        password = request.POST.get("password")
        confirmpassword = request.POST.get("confirmpassword")

        # Validate the password and confirmation password
        if not password or not confirmpassword:
            messages.error(request, "All fields are required.")
            return redirect("Reset_password", hashed_user_id=hashed_user_id)

        if password != confirmpassword:
            messages.error(request, "Password does not match the Confirm Password")
            return redirect("Reset_password", hashed_user_id=hashed_user_id)

        # Call FastAPI API to reset the password
        data = {
            "hashed_user_id": hashed_user_id,
            "new_password": password,
            "confirm_password": confirmpassword
        }

        try:
            response = requests.post(FASTAPI_RESET_PASSWORD_URL, json=data)
            response.raise_for_status()  # Raise an error for invalid responses
            if response.status_code == 200:
                # Send the email notification for successful password reset
                send_successful_reset_password_mail(user)

                messages.success(request, "Password reset successfully.")
                login(request, user)  # Automatically log the user in after reset
                return redirect("users:Login_user")
            else:
                messages.error(request, "Failed to reset the password.")
        except requests.exceptions.RequestException as e:
            messages.error(request, f"Error connecting to the API: {str(e)}")

    # Render the password reset form
    return render(request, "users/Resetpassword.html", {"user": user, "hashed_user_id": hashed_user_id})

# View to add a primary address
@login_required
def add_primary_address(request):
    if request.method == 'POST':
        form = UserAddressForm(request.POST)
        if form.is_valid():
            primary_address = form.save(commit=False)
            primary_address.user = request.user
            primary_address.save()
            messages.success(request, "Primary address saved successfully.")
            return redirect('cart:view_cart')  # Redirect to the cart view after saving
    else:
        form = UserAddressForm()
    return render(request, 'users/add_address_modal.html', {'form': form})

# View to add a secondary address
@login_required
def add_secondary_address(request):
    if request.method == 'POST':
        form = UserSecondaryAddressForm(request.POST)
        if form.is_valid():
            secondary_address = form.save(commit=False)
            secondary_address.user = request.user
            secondary_address.save()
            messages.success(request, "Secondary address saved successfully.")
            return redirect('cart:view_cart')  # Redirect to the cart view after saving
    else:
        form = UserSecondaryAddressForm()
    return render(request, 'users/add_address_modal.html', {'form': form})


def logout_user(request):
    """Logs out the user and redirects to the login page."""
    logout(request)
    messages.success(request, "You have been logged out.")
    return redirect('users:Login_user')

# users urls.py
from django.contrib import admin
from django.urls import path
from users import views
from django.conf import settings
from django.conf.urls.static import static

app = 'users'

urlpatterns = [
    path('login/user/', views.login_user, name = 'Login_user'),
    path('signup/user/', views.signup_user, name = 'Signup_user'),
    path('user/otp/', views.Verify_Login_otp, name = "Login_otp"),
    path('user/resendotp/', views.Resend_user_Login_otp, name = "Resend_otp"),
    path('user/forgetpassword/', views.password_reset_request, name = "send_password_reset_email"),
    path('forgetpassword/<str:hashed_user_id>/', views.Reset_password, name="Reset_password"),
    path('add-primary-address/', views.add_primary_address, name='add_primary_address'),
    path('add-secondary-address/', views.add_secondary_address, name='add_secondary_address'),
    path('logout/user/', views.logout_user, name='logout_user'),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


# config.py
# config.py

# Email Configuration
EMAIL_HOST_USER = 'devpatel02206@gmail.com'
EMAIL_HOST_PASSWORD = 'muzq hzrg wrtr jcig'

# Database Configuration
DB_NAME = 'UrbanBazzar_E-commerce'
DB_USER = 'root'
DB_PASSWORD = 'Dev@1234'
DB_HOST = 'localhost'
DB_PORT = '3306'


# settitngs.py
"""
Django settings for UrbanBazzar project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os 
import socket
from pathlib import Path
from .config import (
    EMAIL_HOST_USER, EMAIL_HOST_PASSWORD,
    DB_NAME, DB_USER, DB_PASSWORD, DB_HOST, DB_PORT
)


def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # Doesn't have to be reachable, just used to determine the outbound interface
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"  # fallback

LOCAL_IPV4 = get_local_ip()
# print(LOCAL_IPV4)


DJANGO_URL = f"http://{LOCAL_IPV4}:1974"
FAST_API_URL = f"http://{LOCAL_IPV4}:2814"

#SMTP Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = EMAIL_HOST_PASSWORD 
DEFAULT_FROM_EMAIL = 'UrbanBazzar <your_email@gmail.com>'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2mc6c%vl1lp1)=_f8ri5td6sjz)pir!jk5&mxw55@b2-=^7g#a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'orders',
    'payments',
    'store',
    'cart',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'UrbanBazzar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'UrbanBazzar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
